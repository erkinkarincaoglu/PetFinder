openapi: 3.0.0
info:
  description: |
    # Version
    The version of the API you are using defined in the media type. The example below shows that the client is requesting the API version 1.1
    ```
    Content-Type: application/vnd.pet-finder-apis-v1.1+json
    ```
  version: 1.0.0
  title: Pet Finder APIs
tags:
  - name: Entries
    description: APIs to manage pet missing entries
  - name: Comments
    description: API to create and retrive the comment on an entry
  - name: Claims
    description: Send "Pet Found" messages to the owners with a photo proof  
paths:
  /entries:
    get:
      tags:
        - Entries
      summary: Searches  pet missing entries by nearby location. Assumed there won't be more than 1000 active missing pets at any given time around ~7km range. So API does not support paging for simplicity and returns all records.
      operationId: getMissingPetEntriesByLocation
      parameters:
        - $ref : '#/components/parameters/correlationId'
        - $ref : '#/components/parameters/locationIdQueryParam'
      responses:
        '200':
          description: A list of missing pets
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingPetEntryList'
        '400':
          $ref: '#/components/responses/InvalidRequest'          
        '401':
          $ref: '#/components/responses/Unauthorised'      
        '403':
          $ref: '#/components/responses/Forbidden'      
        '500':
          $ref: '#/components/responses/InternalServerError'         
    post:
      tags:
        - Entries
      summary: Creates a new missing pet entry.
      operationId: createMissingPetEntry
      parameters:
        - $ref : '#/components/parameters/correlationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MissingPetEntry'
        description: Missing pet details
        required: true            
      responses:
        '204':
          description: Pet missing entry has been created.
        '400':
          $ref: '#/components/responses/InvalidRequest'          
        '401':
          $ref: '#/components/responses/Unauthorised'      
        '403':
          $ref: '#/components/responses/Forbidden'      
        '500':
          $ref: '#/components/responses/InternalServerError'        
    
  /entries/{entryId}:
    get:
      tags:
        - Entries
      summary: Retrieve a missing pet entry
      operationId: getMissingPetEntry
      parameters:
        - $ref : '#/components/parameters/correlationId'
        - $ref : '#/components/parameters/entryIdPathParam'
      responses:
        '200':
          description: A missing pet entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissingPetEntry'
        '400':
          $ref: '#/components/responses/InvalidRequest'          
        '401':
          $ref: '#/components/responses/Unauthorised'      
        '403':
          $ref: '#/components/responses/Forbidden'      
        '500':
          $ref: '#/components/responses/InternalServerError'        
    patch:
      tags:
        - Entries
      summary: Update the missing pet entry status. If the username in the authorisation header does not match the entry's owner the request is rejected. Entry status can be updated to "FOUND" by the owner once their pet is found. Only status of on pet entry can be updated for simplicity.
      operationId: updateMissingPetEntry
      parameters:
        - $ref : '#/components/parameters/correlationId'
        - $ref : '#/components/parameters/entryIdPathParam'         
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
        description: Updates a missing pet entry.
        required: true            
      responses:
        '204':
          description: Pet missing entry has been updated.
        '400':
          $ref: '#/components/responses/InvalidRequest'          
        '401':
          $ref: '#/components/responses/Unauthorised'      
        '403':
          $ref: '#/components/responses/Forbidden'      
        '500':
          $ref: '#/components/responses/InternalServerError'                     
  /entries/{entryId}/comments:
    get:
      tags:
        - Comments
      summary:  Retrieves all the comments for the given entry ordered by create date. Assumed that there won't be more than 1000 comments for a given entry. So paging is not supported for simplicity. If required it can be added later.
      operationId: getCommentsInGivenEntry
      parameters:
        - $ref : '#/components/parameters/correlationId'
        - $ref : '#/components/parameters/entryIdPathParam' 
      responses:
        '200':
          description: A list of comments associated with an entry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentList'
        '400':
          $ref: '#/components/responses/InvalidRequest'          
        '401':
          $ref: '#/components/responses/Unauthorised'      
        '403':
          $ref: '#/components/responses/Forbidden'      
        '500':
          $ref: '#/components/responses/InternalServerError'               
    post:
      tags:
        - Comments
      summary: Post a new comment on an entry. For simplicity we won't allow updates on comments.
      operationId: createComment
      parameters:
        - $ref : '#/components/parameters/correlationId'    
        - $ref : '#/components/parameters/entryIdPathParam' 
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true            
      responses:
        '204':
          description: Comment has been created.
        '400':
          $ref: '#/components/responses/InvalidRequest'          
        '401':
          $ref: '#/components/responses/Unauthorised'      
        '403':
          $ref: '#/components/responses/Forbidden'      
        '500':
          $ref: '#/components/responses/InternalServerError'       

  /entries/{entryId}/claims:
    post:
      tags:
        - Claims
      summary: Post a new "Pet Found" message to the owner with a photo proof
      operationId: createPetFoundMessage
      parameters:
        - $ref : '#/components/parameters/correlationId'    
        - $ref : '#/components/parameters/entryIdPathParam'              
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PetFound'
        required: true            
      responses:
        '204':
          description: Message has been posted to the pet owner by email.
        '400':
          $ref: '#/components/responses/InvalidRequest'          
        '401':
          $ref: '#/components/responses/Unauthorised'      
        '403':
          $ref: '#/components/responses/Forbidden'      
        '500':
          $ref: '#/components/responses/InternalServerError'  
  

    
components:
  parameters:
    correlationId:
      name: x-pf-correlationId
      in: header
      required: true
      description: A unique co-relation id for a request to link request/response
      schema:
        type: string
        format: uuid
    entryIdPathParam:
      name: entryId
      in: path
      required: true
      description: Missing pet entry id
      schema:
        type: string
        example: QlD645qe
        maxLength: 8
    locationIdQueryParam:
      name: location
      in: query
      required: true
      description: Location of the spotter in plus codes
      schema:
        maxLength: 16
        type: string
        example: 9C3XFP73+24

  schemas:
    MissingPetEntryList:
      type: object
      properties:
        pets:
          description: A list of missing pet entries
          type: array
          items:
            $ref: '#/components/schemas/MissingPetEntry'
    CommentList:
      type: object
      properties:
        pets:
          description: A list of missing of comments in an entry
          type: array
          items:
            $ref: '#/components/schemas/Comment'            
    
    PetFound:
      description: Pet found message sent to the ownner via email
      type: object
      required:
        - message
      properties:
        message:
          description: Message to the owner. 
          type: string
          example: "Hi ! I found your cat. It is with me and safe."
          maxLength: 500

    Comment:
      description: A comment in on a pet missing entry
      type: object
      required:
        - message
        - entryId
      properties:
        message:
          description: Comment
          type: string
          example: "I think I saw your cat near Richmond park Sheen gate!"
          maxLength: 500
        entryId:
          description: Entry id for the comment.
          type: string
          example: "QlD645qe"
          maxLength: 8
        location:
          description: Optional location code posted by the commentator
          type: string  
          example: 9C3XFP73+24
          maxLength: 16
      
            
    MissingPetEntry:
      description: Pet missing entry
      type: object
      required:
        - petname
        - location
        - message
        - reward
        - currency
      properties:
        petname:
          description: Name of the pet
          type: string
          example: "Dumpling"
          maxLength: 100
        location:
          description: Location plus code
          type: string  
          example: 9C3XFP73+24
          maxLength: 16
        message:
          description: Pet missing message entry detailed message
          type: string  
          example: "Help me please ! My cat is missing"
          maxLength: 500
        reward:
          description: Reward in minor currency units
          type: number
          example: 100
          minimum: 0
          maximum: 9999999
        currency:
          description: 3 letter ISO 4217 currency code.
          type: string
          example: GBP
          minLength: 3
          maxLength: 3
        status:
          description: Status of the missing entry 
          type: string
          enum: [MISSING, FOUND]
    
    PatchRequest:
      type: object
      description: |
        Object patch operation based on rfc6902: https://datatracker.ietf.org/doc/html/rfc6902
      properties:
        operation: 
          type: string
          enum: [REPLACE, ADD, DELETE]        
        key:
          description: field name
          type: string
        value:
          description: field value
          type: string
          
        
    Errors:
      type: object
      allOf:
        - $ref : '#/components/schemas/Error'
      properties:
        validationErrors:
          type: array
          description: A list of validation errors
          items:
            $ref: '#/components/schemas/ValidationError'
          
    Error:
      type: object
      required:
        - errorName
        - message
      properties:
        errorName:
          type: string
          description: A machine and human readable error type for clarity and semantic understanding of the error
        message:
          type: string
          description: A human readable message giving a corrective action for the error. This is not for the machine consumption.
          
    ValidationError:
      type: object
      allOf:
        - $ref : '#/components/schemas/Error'
      properties:
        jsonPath:
          type: string
          description: The field represents JSONPAth of the element within the request body associated with the error
        pathParameter:
          type: string
          description: This field identifies a path paremeter within the request URL that cause an error e.g. a resource reference.
        queryParameter:
          type: string
          description: This field represents the name of a query parameter within the request URL that caused the error. 
  responses:
    InvalidRequest: 
      description: Invalid Request
      content:
        'application/json':
          schema:
            $ref : '#/components/schemas/Errors'
    Unauthorised: 
      description: Unauthorised
      content:
        'application/json':
          schema:
            $ref : '#/components/schemas/Errors'
    Forbidden: 
      description: Forbidden
      content:
        'application/json':
          schema:
            $ref : '#/components/schemas/Errors'
    InternalServerError: 
      description: InternalServerError
      content:
        'application/json':
          schema:
            $ref : '#/components/schemas/Errors'
      
